server:
  port: 10
spring:
  application:
    name: order-service

  # Database configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/order-service-pg-db
    username: order-service-pg-db_user
    password: order-service-pg-db_password

  # JPA configuration
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false
  sql:
    init:
      mode: always

kafka:
  # GENERAL CONFIG
  bootstrap-servers: localhost:9092,localhost:9093,localhost:9094
  admin:
    enabled: true
  # PRODUCER CONFIG
  producer:
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.serializer: org.apache.kafka.common.serialization.StringSerializer
    # Safety configs (Kafka <= 2.8.0)
    enable.idempotence: true
    acks: all
    retries: 3
    retry.backoff.ms: 1000
    # High throughput (better performance) config
    linger.ms: 20 # After what period of time the producer will send the message
    batch.size: 32768 # 32KB If the batch limit is met, send immediately
    compression.type: snappy
  # CONSUMER CONFIG
  consumer:
    group.id: my-group
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
  # RETRY/DLQ CONFIG
  retry-attempts: 3
  retry-interval: 1000
  retry-backoff-multiplier: 2
  retry-backoff-max-interval: 60000
  dlq-prefix: ""
  dlq-suffix: "-DLQ"
  # TOPICS
  topic-names:
    order-created: order-created
    order-cancelled: order-cancelled
    order-paid: order-paid
    payment-initialized: payments-initialized
    payment-processing: payments-processing
    payment-failed: payments-failed
    payment-verified: payments-verified
    payment-complete: payments-complete

logging:
  level:
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.hibernate.orm.jdbc.bind: WARN
